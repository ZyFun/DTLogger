//
//  DTLogger.swift
//
//
//  Created by –î–º–∏—Ç—Ä–∏–π –î–∞–Ω–∏–ª–∏–Ω on 24.09.2023.
//

import OSLog
import AppMetricaCrashes

/// –ö–ª–∞—Å—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç OSLog –∏ —Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–µ –ª–æ–∫–∞–ª—å–Ω–æ, –∑–∞–ø–∏—Å—ã–≤–∞—è –ª–æ–≥–∏ –≤ –µ–¥–∏–Ω—É—é
/// —Å–∏—Å—Ç–µ–º—É –∂—É—Ä–Ω–∞–ª–∏—Ä–æ–≤–Ω–∞–∏—è.
final public class DTLogger: @unchecked Sendable {
    /// –°–æ–∑–¥–∞—ë—Ç –∏–Ω—Å—Ç–∞–Ω—Å –∫–ª–∞—Å—Å–∞ –∏ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω —Å–∏–Ω–≥–ª—Ç–æ–Ω
    public static let shared = DTLogger()
    
    private init() {}
    
    /// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å  –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    public enum LogLevel {
        case info
        case warning
        case error
        case debug
        
        fileprivate var prefix: String {
            switch self {
            case .info: "INFO ‚ÑπÔ∏è"
            case .warning: "WARNING ‚ö†Ô∏è"
            case .error: "ERROR ‚ùå"
            case .debug: "DEBUG ü©∫"
            }
        }
    }
    
	internal struct LogContext {
        let file: String
        let function: String
        let line: Int
        var description: String {
            "\((file as NSString).lastPathComponent): \(line) \(function)"
        }
    }
    
    /// –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
    /// - –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏
    /// - Parameters:
    ///   - level: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    ///   - message: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å—Å—è
    ///   - showInConsole: –≤–∫–ª—é—á–∞–µ—Ç –∑–∞–ø–∏—Å—å –ª–æ–≥–∞ –∏–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –µ–≥–æ
    ///   - shouldLogContext: –≤–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞, —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞
    public func log(
        _ level: LogLevel,
        _ message: String,
		sendToMetrica: Bool = false,
        showInConsole: Bool = true,
        shouldLogContext: Bool = true,
        file: String = #file,
        function: String = #function,
        line: Int = #line
    ) {
		let logContext = LogContext(file: file, function: function, line: line)

        if showInConsole {
            let formattedMessage = shouldLogContext
            ? "\(message)\n\n\(logContext.description)"
            : message
            
            let osLogLevel: OSLogType
            switch level {
            case .info: osLogLevel = .info
            case .warning: osLogLevel = .error
            case .error: osLogLevel = .fault
            case .debug: osLogLevel = .debug
            }
            
            guard let module = URL(fileURLWithPath: file).deletingPathExtension().pathComponents.last else { return }
            let osLog = OSLog(subsystem: module, category: level.prefix)
            
            os_log(osLogLevel, log: osLog, "%{private}@", formattedMessage)
        }

		guard sendToMetrica else { return }
		if level == .error || level == .warning  {
			sendToAppMetricaLog(message: message, with: logContext, level: level)
		}
    }

	private func sendToAppMetricaLog(message: String, with context: LogContext, level: LogLevel) {
		#if canImport(AppMetricaCrashes)
		let errorMetrica = AppMetricaError(
			identifier: "AlertLog",
			message: message,
			parameters: [
				"level": level.prefix,
				"date": Date(),
				"file": context.file,
				"function": context.function,
				"line": context.line
			],
			backtrace: Thread.callStackReturnAddresses,
			underlyingError: nil
		)
		AppMetricaCrashes.crashes().report(error: errorMetrica)
		#endif
	}
}

